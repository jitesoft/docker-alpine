include:
  - file: /Scan/trivy.yml
    project: jitesoft/gitlab-ci-lib

stages:
  - check
  - download
  - verify
  - build
  - scan

variables:
  ARCHITECTURES: "x86_64 armv7 aarch64 s390x x86"

check-version:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CHECK'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
  stage: check
  cache:
    key: alpine-version
    paths:
      - version.txt
    policy: pull
  script:
    - apk add --no-cache wget grep curl
    - VERSION=$(wget -qO- https://alpinelinux.org/downloads/ | grep -oP "(?<=<strong>)(([0-9]{0,3}(\.?)){3})" | awk 'NR==1{print $1}')
    - touch version.txt
    - |
      if [ ! -z "${FORCE_BUILD+x}" ] || [ "$(cat version.txt)" != "${VERSION}" ]; then
        echo "Should build new container."
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[ALPINE_VERSION]=${VERSION}" -F "variables[BUILD]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      fi


scan:
  tags: [ protected, jitesoft ]
  extends: .scan.container.trivy.remote
  before_script:
    - export SCANNING_IMAGE_NAME="${CI_REGISTRY_IMAGE}:$(cat version.txt)"
  variables:
    GIT_STRATEGY: none
  rules:
    - if: "$SCAN"
      when: always
    - if: "$ALPINE_VERSION"
      when: always
    - when: never
  cache:
    paths:
      - version.txt
    policy: pull
    key: alpine-version

download:
  rules:
    - if: "$ALPINE_VERSION"
      when: always
    - when: never
  stage: download
  parallel:
    matrix:
      - { VERSION: "$ALPINE_VERSION", ARCH: x86_64 }
      - { VERSION: "$ALPINE_VERSION", ARCH: armv7 }
      - { VERSION: "$ALPINE_VERSION", ARCH: aarch64 }
      - { VERSION: "$ALPINE_VERSION", ARCH: ppc64le }
      - { VERSION: "$ALPINE_VERSION", ARCH: s390x }
      - { VERSION: "$ALPINE_VERSION", ARCH: x86 }
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  before_script:
    - apk add --no-cache grep curl
  script:
    - VERSION_SHORT=$(echo ${VERSION} | grep -oP '(\d+[.]\d+)')
    - mkdir -p files/tmp
    - rm -rf files/*
    - cd files
    - mkdir -p ${ARCH}
    - cd ${ARCH}
    - curl -OsS "https://ftp.acc.umu.se/mirror/alpinelinux.org/v${VERSION_SHORT}/releases/${ARCH}/alpine-minirootfs-${VERSION}-${ARCH}.tar.gz"
    - curl -OsS "https://ftp.acc.umu.se/mirror/alpinelinux.org/v${VERSION_SHORT}/releases/${ARCH}/alpine-minirootfs-${VERSION}-${ARCH}.tar.gz.sha256"
    - curl -OsS "https://ftp.acc.umu.se/mirror/alpinelinux.org/v${VERSION_SHORT}/releases/${ARCH}/alpine-minirootfs-${VERSION}-${ARCH}.tar.gz.asc"
    - cd ../../
  artifacts:
    paths:
      - files/*
    expire_in: 1 day

verify:
  needs:
    - job: download
      artifacts: true
  rules:
    - if: "$ALPINE_VERSION"
      when: always
    - when: never
  stage: verify
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  variables:
    GPG_KEY: "0482D84022F52DF1C4E7CD43293ACD0907D9495A"
  before_script:
    - apk add --no-cache gnupg grep wget
    - echo "${GPG_KEY}" > gpgkeys.txt
    - wget https://gist.githubusercontent.com/Johannestegner/093e8053eabd795ed84b83e9610aed6b/raw/helper.sh -O helper
    - chmod +x helper
  script:
    - |
      if [ -f keys.out ]; then
        gpg --import keys.out
      fi
    - gpg --list-keys ${GPG_KEY} || (gpg --keyserver pgp.mit.edu --recv-keys "${GPG_KEY}" || gpg --keyserver keyserver.pgp.com --recv-keys "${GPG_KEY}" || gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "${GPG_KEY}")
    - gpg --export > keys.out
    - |
      for ARCH in ${ARCHITECTURES};
      do
          cd files/${ARCH}
          gpg --verify alpine-minirootfs-${ALPINE_VERSION}-${ARCH}.tar.gz.asc alpine-minirootfs-${ALPINE_VERSION}-${ARCH}.tar.gz
          grep " alpine-minirootfs-${ALPINE_VERSION}-${ARCH}.tar.gz\$" alpine-minirootfs-${ALPINE_VERSION}-${ARCH}.tar.gz.sha256 | sha256sum -c -
          cd ../..
          DOCKER_ARCH=$(./helper arch "${ARCH}")
          echo "Creating directory for ${DOCKER_ARCH}"
          mkdir -p "files/${DOCKER_ARCH}"
          mv files/${ARCH}/alpine-minirootfs-${ALPINE_VERSION}-${ARCH}.tar.gz "files/${DOCKER_ARCH}/alpine-minirootfs.tar.gz"
          rm -rf files/${ARCH}
      done
  cache:
    key: alpine.gpg.keyring
    paths:
      - keys.out
  artifacts:
    paths:
      - files/*
    expire_in: 1 day

build:
  needs:
    - verify
  rules:
    - if: "$ALPINE_VERSION"
      when: always
    - when: never
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - echo "${ALPINE_VERSION}" > version.txt
    - VERSION_SHORT=$(echo ${ALPINE_VERSION} | grep -oP '(\d+[.]\d+)')
    - TAGS="latest,${ALPINE_VERSION},${VERSION_SHORT}"
    - TAG_STRING=$(helper "jitesoft/alpine,${CI_REGISTRY_IMAGE},ghcr.io/jitesoft/alpine" "${TAGS}")
    - ARCH_LIST=$(helper archlist ${ARCHITECTURES})
    - echo "Building for following architectures ${ARCH_LIST}"
    - docker buildx build --platform ${ARCH_LIST} --progress plain --push ${TAG_STRING} --build-arg VERSION_SHORT=${VERSION_SHORT} --build-arg VERSION=${ALPINE_VERSION} .
    - echo "${ALPINE_VERSION}" > version.txt
  tags: [ jitesoft, buildx, protected ]
  cache:
    paths:
      - version.txt
    policy: push
    key: alpine-version



