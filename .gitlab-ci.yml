include:
  - file: /Scan/trivy.yml
    project: jitesoft/gitlab-ci-lib
  - file: /OCI/sign.yml
    project: jitesoft/gitlab-ci-lib

stages:
  - readme
  - check
  - download
  - verify
  - build
  - sign
  - scan

variables:
  ARCHITECTURES: "x86_64 armv7 aarch64 ppc64le s390x x86"

readme-update:
  stage: readme
  image:
    name: chko/docker-pushrm
    entrypoint: ["/bin/sh", "-c", "/docker-pushrm"]
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $README_UPDATE'
      when: always
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - README.md
      when: always
    - when: never
  tags: [ buildx, protected ]
  parallel:
    matrix:
      - { PUSHRM_TARGET: "docker.io/jitesoft/alpine", PUSHRM_FILE: "$CI_PROJECT_DIR/README.md" }
      - { PUSHRM_TARGET: "quay.io/jitesoft/alpine", PUSHRM_FILE: "$CI_PROJECT_DIR/README.md" }
  script:
    - "/bin/true"

check-version:
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  parallel:
    matrix:
      - { MINOR: "13", BASE_TAGS: "3.13" }
      - { MINOR: "14", BASE_TAGS: "3.14" }
      - { MINOR: "15", BASE_TAGS: "3.15" }
      - { MINOR: "16", BASE_TAGS: "3.16" }
      - { MINOR: "17", BASE_TAGS: "3.17,latest" }
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CHECK'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
  stage: check
  cache:
    key: alpine-version-${MINOR}
    paths:
      - version.txt
    policy: pull
  script:
    - VERSION=$(wget -qO- https://www.alpinelinux.org/releases/ | grep -oP "(3\.${MINOR}\.[0-9]{1,3})" | awk 'NR==1{print $1}')
    - touch version.txt
    - |
      if [ ! -z "${FORCE_BUILD+x}" ] || [ "$(cat version.txt)" != "${VERSION}" ]; then
        echo "Should build new container."
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[BASE_TAGS]=${BASE_TAGS}" -F "variables[MINOR]=${MINOR}" -F "variables[ALPINE_VERSION]=${VERSION}" -F "variables[BUILD]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      else
        echo "Should only scan."
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[BASE_TAGS]=${BASE_TAGS}" -F "variables[MINOR]=${MINOR}" -F "variables[ALPINE_VERSION]=${VERSION}" -F "variables[SCAN]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      fi

scan:
  tags: [ protected, jitesoft ]
  extends: .scan.container.trivy.remote
  before_script:
    - export SCANNING_IMAGE_NAME="${CI_REGISTRY_IMAGE}:${ALPINE_VERSION}"
  variables:
    GIT_STRATEGY: none
  rules:
    - if: "$SCAN"
      when: always
    - if: "$BUILD"
      when: always
    - when: never
  cache:
    paths:
      - version.txt
    policy: pull
    key: alpine-version-${MINOR}

download:
  rules:
    - if: "$BUILD"
      when: always
    - when: never
  stage: download
  parallel:
    matrix:
      - { VERSION: "$ALPINE_VERSION", ARCH: x86_64 }
      - { VERSION: "$ALPINE_VERSION", ARCH: armv7 }
      - { VERSION: "$ALPINE_VERSION", ARCH: aarch64 }
      - { VERSION: "$ALPINE_VERSION", ARCH: ppc64le }
      - { VERSION: "$ALPINE_VERSION", ARCH: s390x }
      - { VERSION: "$ALPINE_VERSION", ARCH: x86 }
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - VERSION_SHORT=$(echo ${VERSION} | grep -oP '(\d+[.]\d+)')
    - mkdir -p files/tmp
    - rm -rf files/*
    - cd files
    - mkdir -p ${ARCH}
    - cd ${ARCH}
    - curl -OsS "https://ftp.acc.umu.se/mirror/alpinelinux.org/v${VERSION_SHORT}/releases/${ARCH}/alpine-minirootfs-${VERSION}-${ARCH}.tar.gz"
    - curl -OsS "https://ftp.acc.umu.se/mirror/alpinelinux.org/v${VERSION_SHORT}/releases/${ARCH}/alpine-minirootfs-${VERSION}-${ARCH}.tar.gz.sha256"
    - curl -OsS "https://ftp.acc.umu.se/mirror/alpinelinux.org/v${VERSION_SHORT}/releases/${ARCH}/alpine-minirootfs-${VERSION}-${ARCH}.tar.gz.asc"
    - cd ../../
  artifacts:
    paths:
      - files/*
    expire_in: 1 day

verify:
  needs:
    - job: download
      artifacts: true
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
  stage: verify
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  variables:
    GPG_KEY: "0482D84022F52DF1C4E7CD43293ACD0907D9495A"
  before_script:
    - echo "${GPG_KEY}" > gpgkeys.txt
    - wget https://gist.githubusercontent.com/Johannestegner/093e8053eabd795ed84b83e9610aed6b/raw/helper.sh -O helper
    - chmod +x helper
  script:
    - |
      if [ -f keys.out ]; then
        gpg --import keys.out
      fi
    - gpg --list-keys ${GPG_KEY} || (gpg --keyserver pgp.mit.edu --recv-keys "${GPG_KEY}" || gpg --keyserver keyserver.pgp.com --recv-keys "${GPG_KEY}" || gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "${GPG_KEY}")
    - gpg --export > keys.out
    - |
      for ARCH in ${ARCHITECTURES};
      do
          cd files/${ARCH}
          gpg --verify alpine-minirootfs-${ALPINE_VERSION}-${ARCH}.tar.gz.asc alpine-minirootfs-${ALPINE_VERSION}-${ARCH}.tar.gz
          grep " alpine-minirootfs-${ALPINE_VERSION}-${ARCH}.tar.gz\$" alpine-minirootfs-${ALPINE_VERSION}-${ARCH}.tar.gz.sha256 | sha256sum -c -
          cd ../..
          DOCKER_ARCH=$(./helper arch "${ARCH}")
          echo "Creating directory for ${DOCKER_ARCH}"
          mkdir -p "files/${DOCKER_ARCH}"
          mv files/${ARCH}/alpine-minirootfs-${ALPINE_VERSION}-${ARCH}.tar.gz "files/${DOCKER_ARCH}/alpine-minirootfs.tar.gz"
          rm -rf files/${ARCH}
      done
  cache:
    key: alpine.gpg.keyring
    paths:
      - keys.out
  artifacts:
    paths:
      - files/*
    expire_in: 1 day

build:
  needs:
    - verify
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - echo "${ALPINE_VERSION}" > version.txt
    - VERSION_SHORT=$(echo ${ALPINE_VERSION} | grep -oP '(\d+[.]\d+)')
    - TAGS="${BASE_TAGS},${ALPINE_VERSION}"
    - TAG_STRING=$(helper "jitesoft/alpine,${CI_REGISTRY_IMAGE},ghcr.io/jitesoft/alpine,quay.io/jitesoft/alpine" "${TAGS}")
    - ARCH_LIST=$(helper archlist ${ARCHITECTURES})
    - echo "Building for following architectures ${ARCH_LIST}"
    - BUILD_TIME=$(date -Iseconds)
    - docker buildx build --platform ${ARCH_LIST} --metadata-file meta.json --progress plain --push ${TAG_STRING} --build-arg VERSION_SHORT=${VERSION_SHORT} --build-arg BUILD_TIME="${BUILD_TIME}" --build-arg VERSION=${ALPINE_VERSION} .
    - echo "${ALPINE_VERSION}" > version.txt
  tags: [ jitesoft, buildx, protected ]
  cache:
    paths:
      - version.txt
    policy: push
    key: alpine-version-${MINOR}
  artifacts:
    paths:
      - meta.json
    when: on_success
    expire_in: 10 hours

sign:
  extends: .sign
  tags: [ jitesoft, protected, buildx ]
  stage: sign
  variables:
    COSIGN_ANNOTATIONS: "-a sig=jitesoft-bot"
    SIGN_TAGS: "${BASE_TAGS},${ALPINE_VERSION}"
    SIGN_IMAGES: "jitesoft/alpine,${CI_REGISTRY_IMAGE},ghcr.io/jitesoft/alpine"
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never

